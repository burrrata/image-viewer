{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","URLs","setURLs","_useState3","_useState4","currentURL","setCurrentURL","_useState5","_useState6","dropzoneView","setDropzoneView","useEffect","interval","setInterval","newURL","Math","floor","random","length","clearInterval","react_default","a","createElement","className","src","alt","onDrop","useCallback","acceptedFiles","reader","FileReader","onabort","console","log","onerror","onload","droppedURLArray","result","split","filter","e","trim","forEach","file","readAsBinaryString","_useDropzone","useDropzone","getRootProps","getInputProps","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0MAgFeA,MA1Ef,WAAe,IAAAC,EAGUC,mBAAS,MAHnBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAGPK,EAHOH,EAAA,GAGDI,EAHCJ,EAAA,GAAAK,EAIsBN,mBAAS,4DAJ/BO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAIPE,EAJOD,EAAA,GAIKE,EAJLF,EAAA,GAAAG,EAK0BV,mBAAS,QALnCW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAKPE,EALOD,EAAA,GAKOE,EALPF,EAAA,GAiEd,OAdAG,oBAAU,WACT,IAAMC,EAAWC,YAAY,WAC5B,GAAY,MAARZ,EAAc,CACjBS,EAAgB,UAChB,IAAMI,EAASb,EAAKc,KAAKC,MAAMD,KAAKE,SAAShB,EAAKiB,SAClDZ,EAAcQ,KAEb,KACH,OAAO,WACNK,cAAcP,MAMfQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAzBF,WACC,OACCF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAKnB,EAAYkB,UAAU,mBAAmBE,IAAI,OAsBxD,MACAL,EAAAC,EAAAC,cA3DF,WAEC,IAAMI,EAASC,sBAAY,SAAAC,GAC1B,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,QAAU,kBAAMC,QAAQC,IAAI,6BACnCJ,EAAOK,QAAU,kBAAMF,QAAQC,IAAI,4BACnCJ,EAAOM,OAAS,WAIf,IACMC,EADYP,EAAOQ,OACSC,MAAM,QAAQC,OAAQ,SAAAC,GAAC,OAAIA,EAAEC,OAAOvB,OAAS,IAE/EhB,EAAQkC,IAETR,EAAcc,QAAQ,SAAAC,GAAI,OAAId,EAAOe,mBAAmBD,MACtD,IAhBoBE,EAkBeC,YAAY,CAACpB,WAA5CqB,EAlBgBF,EAkBhBE,aAAcC,EAlBEH,EAkBFG,cAErB,OACC5B,EAAAC,EAAAC,cAAA,OAAKC,UAAWd,GACfW,EAAAC,EAAAC,cAAA,MAASyB,IACR3B,EAAAC,EAAAC,cAAA,QAAW0B,KACX5B,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAAb,mCAmCF,QC9DiB0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.04cce726.chunk.js","sourcesContent":["import React, {useCallback, useState, useEffect} from 'react'\nimport {useDropzone} from 'react-dropzone'\nimport './App.css'\n\n// The image viewing app\n// - note: written with React hooks so will not work with classes\nfunction App() {\n\t\n\t// init the state\n\tconst [URLs, setURLs] = useState(null)\n\tconst [currentURL, setCurrentURL] = useState('https://apod.nasa.gov/apod/image/1904/M87bh_EHT_2629.jpg')\n\tconst [dropzoneView, setDropzoneView] = useState('over')\n\t\n\t// dropzone component for the user to upload a text file with a unique URL on every line\n\t// each URL needs to be a direct link to an image\n\tfunction FileDropzone() {\n\t\t// process files when they are dropped\n\t\tconst onDrop = useCallback(acceptedFiles => {\n\t\t\tconst reader = new FileReader()\n\t\t\treader.onabort = () => console.log('file reading was aborted')\n\t\t\treader.onerror = () => console.log('file reading has failed')\n\t\t\treader.onload = () => {\n\t\t\t\t// binaryStr is a string with each URL separated by a space\n\t\t\t\t// we then split the string by spaces and add each new string to\n\t\t\t\t// an array where each URL is an item\n\t\t\t\tconst binaryStr = reader.result\n\t\t\t\tconst droppedURLArray = binaryStr.split(/(\\s)/).filter( e => e.trim().length > 0)\n\t\t\t\t// update the state\n\t\t\t\tsetURLs(droppedURLArray)\n\t\t\t}\n\t\t\tacceptedFiles.forEach(file => reader.readAsBinaryString(file))\n\t\t}, [])\n\t\t// not sure what this does\n\t\tconst {getRootProps, getInputProps} = useDropzone({onDrop})\n\t\t// return the dropzone component\n\t\treturn (\n\t\t\t<div className={dropzoneView} >\n\t\t\t\t<div {...getRootProps()} >\n\t\t\t\t\t<input {...getInputProps()} />\n\t\t\t\t\t<p className='dropzone-text'>\n\t\t\t\t\t\tClick to upload a text file.\n\t\t\t\t\t</p>\t\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n\n\t// image display component\n\tfunction Image() {\n\t\treturn(\n\t\t\t<div className='img-box'>\n\t\t\t\t<img src={currentURL} className='under center-fit' alt='' />\n\t\t\t</div>\n\t\t)\n\t}\n\n\t// randomly select the currentURL from the URLs list on a recurring basis\n\tuseEffect(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tif (URLs != null) {\n\t\t\t\tsetDropzoneView('hidden')\n\t\t\t\tconst newURL = URLs[Math.floor(Math.random()*URLs.length)]\n\t\t\t\tsetCurrentURL(newURL)\n\t\t\t}\n\t\t}, 5000)\n\t\treturn function cleanup() {\n\t\t\tclearInterval(interval)\t\n\t\t}\n\t})\n\n\t// return the app components\n\treturn (\n\t\t<div className='app'>\n\t\t\t<Image />\n\t\t\t<FileDropzone />\n\t\t</div>\n\t)\n}\n\n// export the app\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}